trigger: none
#  branches:
#    include:
#      - main
#      - develop

# pr:
#   branches:
#     include:
#       - devops-develop

pool:
  vmImage: 'macOS-latest'

parameters:
- name: env
  displayName: 'Deployment Environment'
  type: string
  default: 'dev'
  values:
  - dev
  - uat
  - prod

variables:
- group: authentication_credentials_and_settings_android


name: $(Date:yyyyMMdd).$(Rev:r)

stages:
- stage: Build
  jobs:
  - job: SetupEnvAndBuildJob
    steps:
    - task: DownloadSecureFile@1
      displayName: 'Download .env file'
      inputs:
        secureFile: '.env'
    - task: CopyFiles@2
      displayName: 'Copy .env file to assets'
      inputs:
        SourceFolder: '$(Agent.TempDirectory)'
        Contents: '**\.env'
        TargetFolder: '$(Build.SourcesDirectory)/assets/'
    - task: DownloadSecureFile@1
      displayName: Download key properties file
      inputs:
        secureFile: 'key.properties'
    - task: DownloadSecureFile@1
      displayName: 'Download secure file'
      inputs:
        secureFile: 'key.jks'
    - task: CopyFiles@2
      displayName: 'Copy keystore files'
      inputs:
        SourceFolder: '$(Agent.TempDirectory)'
        Contents: '**\key.*'
        TargetFolder: '$(Build.SourcesDirectory)/android/'
    - task: CmdLine@2
      env:
        JAVA_HOME: $(JAVA_HOME_21_X64)
        PATH: $(JAVA_HOME_21_X64)/bin:$(PATH)
      displayName: 'Set JAVA_HOME'
      inputs:
        script: |
          java -version
          ls -la $(Build.SourcesDirectory)/android/
    - task: Bash@3
      displayName: 'Capture Andriod Minimum SDK Version'
      inputs:
        targetType: 'inline'
        script: |
          # Define the path to build.gradle file
          GRADLE_FILE="$(Build.SourcesDirectory)/android/app/build.gradle"

          # Use grep to find the line with minSdkVersion and awk to extract the value
          MIN_SDK_VERSION=$(grep 'minSdkVersion' "$GRADLE_FILE" | awk '{print $2}')

          # Check if MIN_SDK_VERSION was found and print it
          if [ -n "$MIN_SDK_VERSION" ]; then
            echo "Using minSdkVersion: $MIN_SDK_VERSION"
          else
            echo "minSdkVersion not found in $GRADLE_FILE"
            exit 1
          fi

          # Output the result to set the pipeline variable
          echo "##vso[task.setvariable variable=minSdkVersion;isreadonly=true]$MIN_SDK_VERSION"

          echo "SourceBranchName is $(Build.SourceBranchName)"
          if [ "$(Build.SourceBranchName)" != "main" ]; then
            echo "##vso[task.setvariable variable=buildConfiguration;isOutput=true]Debug"
          else
            echo "##vso[task.setvariable variable=buildConfiguration;isOutput=true]Release"
          fi
    - task: FlutterInstall@0
      inputs:
        mode: 'auto'
        channel: 'stable'
        version: 'custom'
        customVersion: '3.24.4'
    - task: FlutterCommand@0
      displayName: "Run clean"
      inputs:
        projectDirectory: './'
        arguments: 'clean'
    - task: FlutterCommand@0
      displayName: "Run pub get"
      inputs:
        projectDirectory: './'
        arguments: 'pub get'
    - task: FlutterCommand@0
      displayName: "Activate localization"
      inputs:
        projectDirectory: './'
        arguments: 'packages pub global activate intl_utils'
    - task: FlutterCommand@0
      displayName: "Run Flutter diagnostics"
      inputs:
        projectDirectory: './'
        arguments: 'doctor -v'
    - task: FlutterAnalyzeTask@0
      displayName: "Run Analyze (Static Code Analysis)"
      continueOnError: true
      inputs:
        projectDirectory: './'
        pubGet: false
        extraArgs: '--no-fatal-warnings'

    - task: FlutterBuild@0
      displayName: Flutter Build APK
      inputs:
        target: 'apk'
        projectDirectory: '$(Build.SourcesDirectory)'
        buildFlavour: '${{ parameters.env }}'
        entryPoint: 'lib/main.dart'
        extraArgs: '--dart-define=IS_PROD=${{ parameters.env }}'
      env:
        JAVA_HOME: $(JAVA_HOME_17_X64)
    - task: AndroidSigning@3
      displayName: Sign APK
      inputs:
        apkFiles: '**/*.apk'
        apksignerKeystoreFile: 'key.jks'
        apksignerKeystorePassword: '$(apksignerKeystorePassword)'
        apksignerKeystoreAlias: '$(apksignerKeystoreAlias)'
        apksignerKeyPassword: '$(apksignerKeyPassword)'
        zipalign: false
    - task: FlutterBuild@0
      displayName: Flutter Build AAB
      inputs:
        target: 'aab'
        projectDirectory: '$(Build.SourcesDirectory)'
        buildFlavour: '${{ parameters.env }}'
        entryPoint: 'lib/main.dart'
      env:
        JAVA_HOME: $(JAVA_HOME_17_X64)
    - task: AndroidSigning@3
      displayName: Sign AAB
      inputs:
        apkFiles: '**/*.aab'
        apksignerKeystoreFile: 'key.jks'
        apksignerKeystorePassword: '$(apksignerKeystorePassword)'
        apksignerKeystoreAlias: '$(apksignerKeystoreAlias)'
        apksignerKeyPassword: '$(apksignerKeyPassword)'
        apksignerArguments: '--min-sdk-version $(minSdkVersion) -verbose'
        zipalign: true
    - task: CopyFiles@2
      displayName: 'Stage APK and AAB Deployment Artifacts'
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)/build/app/outputs/'
        Contents: |
          bundle/**/*.aab
          apk/**/*.apk
        flattenFolders: true
        TargetFolder: '$(build.artifactStagingDirectory)'
    - script: |
        # Define the base path
        BASE_PATH=$(Build.SourcesDirectory)/build/app/intermediates/merged_native_libs/

        # Find the directory containing the native symbols
        TARGET_DIR=$(find "$BASE_PATH" -mindepth 1 -maxdepth 10 -type d -exec sh -c '
          for dir in "$@"; do
            if [ -d "$dir/arm64-v8a" ] && [ -d "$dir/armeabi-v7a" ] && [ -d "$dir/x86_64" ]; then
              echo "$dir"
              exit 0
            fi
          done
        ' sh {} +)

        if [ -z "$TARGET_DIR" ]; then
          echo "No native symbols directory found"
          exit 1
        fi

        echo "##vso[task.setvariable variable=NativeSymbolsPath]$TARGET_DIR"
      displayName: 'Find Native Symbols Directory'
    - task: ArchiveFiles@2
      displayName: 'Stage Native Symbols Archive'
      inputs:
        rootFolderOrFile: '$(NativeSymbolsPath)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(build.artifactStagingDirectory)/native_symbols.zip'
    - task: PublishPipelineArtifact@1
      displayName: Publish APK and AAB to pipeline artifacts
      inputs:
        targetPath: '$(build.artifactStagingDirectory)'
        artifactName: 'android-${{ parameters.env }}'

- stage: Deploy
  dependsOn:
  - Build
  condition: and(succeeded(), eq('${{ parameters.env }}', 'prod'))
  jobs:
  - job: DeployAppJob
    steps:
    - checkout: none
    - task: DownloadPipelineArtifact@2
      displayName: Download published artifacts
      inputs:
        artifact: 'android-${{ parameters.env }}'
        path: '$(build.artifactStagingDirectory)'
    - script: |
        npm install -g firebase-tools
      displayName: 'Install Firebase CLI'
    - script: |
        firebase crashlytics:symbols:upload --token $(firebaseCIServerToken) --app $(firebaseAndroidAppID) $(build.artifactStagingDirectory)/native_symbols.zip
      displayName: 'Upload Native Symbols to Firebase'
    - task: GooglePlayRelease@4
      displayName: Deploy to Google Play Console
      inputs:
        serviceConnection: 'Google-Play-Console-API'
        applicationId: '$(appIdentifier)'
        action: 'SingleBundle'
        bundleFile: '$(build.artifactStagingDirectory)/*.aab'
        track: 'internal'
        shouldUploadNativeDebugSymbols: true
        nativeDebugSymbolsFile: '$(build.artifactStagingDirectory)/native_symbols.zip'
        releaseName: $(Build.BuildNumber)
    - task: XplatGenerateReleaseNotes@4
      condition: ne(variables['Build.Reason'], 'Manual')
      inputs:
        outputfile: 'releasenote.txt'
        templateLocation: 'InLine'
        inlinetemplate: |
          Release Notes:
          {{#forEach commits}}
            - {{this.message}}
          {{/forEach}}
        dumpPayloadToConsole: false
        dumpPayloadToFile: false
        replaceFile: True
        getParentsAndChildren: False
        getAllParents: False
        getIndirectPullRequests: False
        stopOnError: False
        considerPartiallySuccessfulReleases: False
        checkForManuallyLinkedWI: False
        wiqlFromTarget: 'WorkItems'
    - task: PublishPipelineArtifact@1
      condition: ne(variables['Build.Reason'], 'Manual')
      displayName: 'Publish release notes to pipeline artifacts'
      inputs:
        targetPath: '$(Build.SourcesDirectory)/releasenote.txt'
        artifactName: 'ReleaseNotes'